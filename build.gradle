plugins {
	id "fabric-loom" version "0.10-SNAPSHOT"
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

shadowJar {
	archiveFileName = "${archivesBaseName}-${archiveVersion.get()}_${project.minecraft_version_least}-${project.minecraft_version}.${archiveExtension.get()}"
	from remapJar
	configurations = [project.configurations.shadow] // Only take dependencies that are included with 'shadow' in the dependencies section.
	exclude("/mappings/") // Included within project.configurations.implementation for some reason.
	exclude("/com/sun/") // This dependency is shadowed within the DRPC library, but it already exists on Minecraft's classpath by default, so to save space, it is excluded.
	exclude("/META-INF/maven/") // Unnecessary
	exclude("/LICENSE")
}

shadowJar.dependsOn remapJar
tasks.build.dependsOn shadowJar

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:v2.0.0-beta.4"
	modImplementation "com.ptsmods:devlogin:2.0"
	modImplementation 'me.lucko:fabric-permissions-api:0.1-SNAPSHOT'
	shadow implementation("com.github.Chocohead:Fabric-ASM:v2.3")
	shadow implementation("com.github.Vatuu:discord-rpc:1.6.2")
	shadow implementation("com.esotericsoftware:reflectasm:1.11.9")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible())
		 it.options.release = 8
}

java {
	withSourcesJar()
}
